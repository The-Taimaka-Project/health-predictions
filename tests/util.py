# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3EYR9yeUkmj_V29EsfVfJHVzDekJBaF
"""

# !git clone -b brian-etl-code https://github.com/The-Taimaka-Project/health-predictions.git

# %cd health-predictions/packages/inference/run
import util

import unittest
from unittest.mock import patch, MagicMock
import pandas as pd
from google.colab import drive

class TestEtlReaderWriter(unittest.TestCase):

    @patch('__main__.pd.read_csv') # Patch pandas.read_csv within the current scope (__main__)
    @patch('__main__.drive.mount') # Patch google.colab.drive.mount within the current scope (__main__)
    def test_read_data(self,mock_mount,mock_read_csv):
        # Mock the read_csv function to return dummy dataframes
        # Using MagicMock allows attribute access and method calls without errors
        mock_read_csv.return_value = MagicMock(spec=pd.DataFrame) # Use spec=pd.DataFrame for more realistic mocking

        # Instantiate the class
        reader_writer = util.EtlReaderWriter()

        # Call the method
        current, admit, weekly, raw, weekly_raw, itp, relapse, mh = reader_writer.read_data()

        # Assert that drive.mount was called
        mock_mount.assert_called_once_with("/content/drive")


                # Assert that pd.read_csv was called 8 times with the correct paths
        expected_calls = [
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_current_processed_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_admit_processed_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_weekly_processed_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_admit_raw_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_weekly_raw_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_itp_roster_2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_relapse_raw2024-11-15.csv"),
            unittest.mock.call("/content/drive/My Drive/[PBA] Full datasets/FULL_pba_mh_raw2024-11-15.csv")
        ]
        # Check if calls match, ignoring any potential initial mount calls if not mocked correctly
        # For this specific test, we expect exactly these calls
        mock_read_csv.assert_has_calls(expected_calls, any_order=False)
        self.assertEqual(mock_read_csv.call_count, len(expected_calls))

                # Assert that the returned values are not None (because our mock returns MagicMocks)
        self.assertIsNotNone(current)
        self.assertIsNotNone(admit)
        self.assertIsNotNone(weekly)
        self.assertIsNotNone(raw)
        self.assertIsNotNone(weekly_raw)
        self.assertIsNotNone(itp)
        self.assertIsNotNone(relapse)
        self.assertIsNotNone(mh)

# Run the tests

if __name__ == '__main__':
    # Add TestAdder to the list of tests to run if needed, or let unittest discover
    # Modify the argv to include test discovery or explicitly specify the test class
    unittest.main(argv=['first-arg-is-ignored'], exit=False)